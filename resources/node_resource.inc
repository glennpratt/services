<?php
// $Id: node_resource.inc,v 1.1.2.1 2009/09/05 13:57:58 marcingy Exp $

function _node_resource_definition() {
  return array(
    'node' => array(
      'retrieve' => array(
        'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
        'callback' => '_node_resource_retrieve',
        'args' => array(
          array(
            'name' => 'nid',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'int',
            'description' => 'The nid of the node to get',
          ),
        ),
        'access callback' => '_node_resource_access',
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
      ),
      'create' => array(
        'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
        'callback' => '_node_resource_create',
        'args' => array(
          array(
            'name' => 'node',
            'optional' => FALSE,
            'source' => 'data',
            'description' => 'The node object to create',
            'type' => 'struct',
          ),
        ),
        'access callback' => '_node_resource_access',
        'access arguments' => array('create'),
        'access arguments append' => TRUE,
      ),
      'update' => array(
        'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
        'callback' => '_node_resource_update',
        'args' => array(
          array(
            'name' => 'nid',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'int',
            'description' => 'The nid of the node to get',
          ),
          array(
            'name' => 'node',
            'optional' => FALSE,
            'source' => 'data',
            'description' => 'The node data to update',
            'type' => 'struct',
          ),
        ),
        'access callback' => '_node_resource_access',
        'access arguments' => array('update'),
        'access arguments append' => TRUE,
      ),
      'delete' => array(
        'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
        'callback' => '_node_resource_delete',
        'args' => array(
          array(
            'name' => 'nid',
            'optional' => FALSE,
            'source' => array('path' => 0),
          ),
        ),
        'access callback' => '_node_resource_access',
        'access arguments' => array('delete'),
        'access arguments append' => TRUE,
      ),
      'index' => array(
        'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
        'callback' => '_node_resource_index',
        'args' => array(
          array(
            'name' => 'page',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'The zero-based index of the page to get, defaults to 0.',
            'default value' => 0,
            'source' => array('param' => 'page'),
          ),
          array(
            'name' => 'fields',
            'optional' => TRUE,
            'type' => 'string',
            'description' => 'The fields to get.',
            'default value' => '',
            'source' => array('param' => 'fields'),
          ),
          array(
            'name' => 'parameters',
            'optional' => TRUE,
            'type' => 'struct',
            'description' => 'Parameters',
            'default value' => NULL,
            'source' => 'param',
          ),
        ),
        'access arguments' => array('access content'),
        'access arguments append' => FALSE,
      ),
    ),
  );
}

function _node_resource_retrieve($nid) {
  global $user;
  $node = node_load($nid);

  if ($node) {
    // Apply field level content permissions
    if (module_exists('content')) {
      $fields = content_fields(NULL, $node->type);
      foreach ($fields as $field_name => $field_info) {
        if (isset($node->$field_name)) {
          $access = module_invoke_all('field_access', 'view', $field_info, $user, $node);
          if (in_array(FALSE, $access)) {
            unset($node->$field_name);
          }
        }
      }
    }
    $node->uri = services_resource_uri(array('node', $node->nid));
  }
  return $node;
}

function _node_resource_create($node) {
  $node = (object)$node;

  if (!isset($node->type)) {
    return services_error('Missing node type', 406);
  }
  // Unset the nid to make sure that only an insert occurs.
  unset($node->nid);

  // Load the required includes for drupal_execute
  module_load_include('inc', 'node', 'node.pages');
  $nid = NULL;

  // Setup form_state
  $values = (array)$node;
  $form_state = array();
  $form_state['values'] = $values;
  if (!isset($form_state['values']['op'])) {
    $form_state['values']['op'] = t('Save');
  }
  $ret = drupal_execute($node->type . '_node_form', $form_state, $node);

  // Fetch $nid out of $form_state
  $nid = $form_state['nid'];

  if ($errors = form_get_errors()) {
    return services_error(implode("\n", $errors), 406);
  }

  return (object)array(
    'nid' => $nid,
    'uri' => services_resource_uri(array('node', $nid)),
  );
}

function _node_resource_update($nid, $node) {
  $node = (object)$node;
  $node->nid = $nid;

  $old_node = node_load($node->nid);
  if ($old_node->nid) {
    // Load the required includes for drupal_execute
    module_load_include('inc', 'node', 'node.pages');

    // Setup form_state.
    $values = (array)$node;
    $form_state = array();
    $form_state['values'] = $values;
    if (!isset($form_state['values']['op'])) {
      $form_state['values']['op'] = t('Save');
    }
    $form_state['node'] = (array)$old_node;

    drupal_execute($old_node->type . '_node_form', $form_state, $old_node);

    if ($errors = form_get_errors()) {
      return services_error(implode("\n", $errors), 406);
    }
  }
  else {
    return services_error(t('Node not found'), 404);
  }

  return $node->nid;
}

function _node_resource_delete($nid) {
  node_delete($nid);
  return TRUE;
}

function _node_resource_index($page = 0, $fields = array(), $parameters = array()) {
  $params = array();

  if (module_exists('query_builder')) {
    $builder = new QueryBuilder();
    $parameters = (array)$parameters;

    if (isset($parameters['__describe'])) {
      return $builder->describe();
    }

    if (is_string($fields) && !empty($fields)) {
      $fields = preg_split('/,\s?/', $fields);
    }

    if (!user_access('administer nodes') || !isset($parameters['status'])) {
      $parameters['status'] = 1;
    }
    list($sql, $params) = $builder->query($fields, $parameters);
  }
  else {
    $table = 'node';
    $schema = drupal_get_schema($table);

    $parameters = (array)$parameters;
    if (!user_access('administer nodes') || !isset($parameters['status'])) {
      $parameters['status'] = 1;
    }
    $verified_fields = array();
    foreach($fields as $field) {
      if (in_array($field, array_keys($schema['fields']))) {
        $verified_fields[] = $field;
      }
    }
    $fieldset = (!empty($verified_fields)?implode(', ', $verified_fields):'*');

    // Only allow fields that actually exist.
    foreach($parameters as $key => $param) {
      if (in_array($key, array_keys($schema['fields']))) {
        $where[] = $key . " = " . db_type_placeholder($schema['fields'][$key]['type']);
        $params[] = $param;
      }
    }
    $sql = "SELECT $fieldset FROM {$table}" . ((!empty($where))?' WHERE ' . implode(' AND ', $where):'') . " ORDER BY sticky DESC, created DESC";
  }
  $res = db_query_range($sql, $params, $page * 20, 20);

  $events = array();
  while ($event = db_fetch_object($res)) {
    $event->uri = services_resource_uri(array('node', $event->nid));
    $events[] = $event;
  }
  return $events;
}
